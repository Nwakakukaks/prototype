import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import {
  logConsole,
  sendCharacterMessage,
  sendGodMessage,
} from "../../../utils";

const dynamoClient = new DynamoDBClient({});
const docClient = DynamoDBDocumentClient.from(dynamoClient, {
  marshallOptions: {
    convertClassInstanceToMap: true,
  },
});

/**
 * Interface for the input data of the CreateInterface tool
 */
export interface CreateInterfaceInput {
  designSpec: string;
  framework: string;
  componentType: "Page";
  styleFramework: string;
  responsive: boolean;
  darkMode: boolean;
  createdBy: string;
  characterId: string;
  sessionId: string;
}

/**
 * Interface for the response structure
 */
export interface InterfaceResult {
  message: string;
  code: InterfaceCode;
  error?: string;
}

/**
 * Interface for the code structure returned to the frontend
 */
export interface InterfaceCode {
  fileName: string;
  language: string;
  content: string;
  framework: string;
  styleFramework: string;
  componentType: string;
}

/**
 * Creates a UI interface from design specifications by calling the Grok API.
 * Generates Next.js code styled with TailwindCSS in a single-page component.
 */
export async function createInterface(
  inputData: CreateInterfaceInput
): Promise<InterfaceResult> {
  try {
    // Send initial message to character
    await sendCharacterMessage(
      inputData.characterId,
      inputData.sessionId,
      docClient,
      `On it, creating the interface from Pearl's designs...`
    );

    const promptSystem = `
You are an expert UI developer proficient in Next.js and TailwindCSS. Your task is to generate a single-page UI interface as a complete, self-contained React component. The output should be formatted as valid Next.js code (TypeScript) using TailwindCSS for styling. The code must begin with the 'use client' directive and import React. It must include a header, a main body, and a footer. Below is an example of the expected formatting:

'use client';
import React from 'react';

export default function Page() {
  return (
    <div className="flex flex-col min-h-screen">
      <header>
        {/* Header content */}
      </header>
      <main>
        {/* Main content */}
      </main>
      <footer>
        {/* Footer content */}
      </footer>
    </div>
  );
}

Ensure your generated code follows this format exactly. Do not include any commentary or additional textâ€”output only the code.
    `;

    const promptUser = `Generate a complete page component based on the following design specifications:

    - Framework: ${inputData.framework || "Next.js"}
    - Component Type: ${inputData.componentType || "Page"}
    - Style Framework: ${inputData.styleFramework || "TailwindCSS"}
    - Responsive: ${inputData.responsive !== false ? "Yes" : "No"}
    - Dark Mode: ${inputData.darkMode ? "Yes" : "No"}
    
    Detailed Design Specification:
    ${inputData.designSpec}
    
    The generated code must be a self-contained, standalone React component that begins with the 'use client' directive and includes all necessary imports. The component should include a header, a main section, and a footer. Output only the code, without any commentary.`;

    const apiKey = process.env.XAI_API_KEY;
    if (!apiKey) {
      throw new Error("XAI_API_KEY environment variable is not set");
    }

    // Call the Grok Chat API using fetch
    const response = await fetch(
      "https://api.groq.com/openai/v1/chat/completions",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          messages: [
            { role: "system", content: promptSystem },
            { role: "user", content: promptUser },
          ],
          model: "llama-3.3-70b-versatile",
          stream: false,
          temperature: 0,
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const generatedCode = data.choices[0].message.content;

    if (!generatedCode) {
      throw new Error("No code was generated by the Grok API");
    }

    // Format the code result
    const codeResult = generatedCode;

    await sendGodMessage(inputData.sessionId, docClient, {
      createdBy: inputData.createdBy,
      characterId: inputData.characterId,
      createdAt: new Date().toISOString(),
      eventName: "interface_created",
      metadata: {
        code: codeResult,
      },
    });

    logConsole.info(codeResult);

    return {
      message: "UI interface code generated successfully",
      code: codeResult,
    };
  } catch (error: any) {
    logConsole.error("Error generating interface code:", error);
    return {
      message: `Failed to generate interface code: ${error.message}`,
      code: {
        fileName: "Main.tsx",
        language: "typescript",
        content: "",
        framework: inputData.framework || "Next.js",
        styleFramework: inputData.styleFramework || "TailwindCSS",
        componentType: inputData.componentType || "Page",
      },
      error: error.name || "InterfaceGenerationError",
    };
  }
}

export default createInterface;
